// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id         Int      @id @default(autoincrement())
  employeeId Int
  Employee   Employee @relation(fields: [employeeId], references: [id])
  token      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Employee {
  id            Int      @id @default(autoincrement())
  user          String   @unique @db.VarChar(255)
  name          String   @db.VarChar(255)
  password      String   @db.VarChar(255)
  status        String   @db.VarChar(255)
  paymentStatus Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          String   @db.VarChar(255)
  managerId     Int? // Adicionando o campo para o ID do manager

  // Relationships
  Manager      Employee?  @relation("Employees", fields: [managerId], references: [id])
  Subordinates Employee[] @relation("Employees") // Employees associados a este manager

  Schedules Schedule[]
  Points    Point[]
  Sessions  Session[]
}

model Schedule {
  id     Int    @id @default(autoincrement())
  status String

  // Relationships
  employeeId Int
  Employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Point {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  date          String
  status        String
  entryTime     String
  exitTime      String?
  justification String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  Employee Employee @relation(fields: [employeeId], references: [id])
  Records  Record[]
}

model PointStatus {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  Records Record[]
}

// Tabela de Registros
model Record {
  id            Int      @id @default(autoincrement())
  pointId       Int
  pointStatusId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  Point       Point       @relation(fields: [pointId], references: [id])
  PointStatus PointStatus @relation(fields: [pointStatusId], references: [id])
}
